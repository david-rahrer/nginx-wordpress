server {
  listen 80;
  server_name example.com;
  return 301 $scheme://www.example.com$request_uri;
}

server {
  listen 80; # listen for ipv4; this line is default and implied
  #listen [::]:80 default ipv6only=on; ## listen for ipv6
  #listen [::]:443 ipv6only=off ssl;
  server_name www.example.com;
  #ssl_certificate /srv/www/example.com/ssl/www.example.com.crt;
  #ssl_certificate_key /srv/www/example.com/ssl/www.example.com.key;

  root /srv/www/example.com/htdocs;
  index index.php index.html index.htm;
  autoindex off;

  # Show "Not Found" 404 errors in place of "Forbidden" 403 errors, because
  # forbidden errors allow attackers potential insight into your server's
  # layout and contents
  error_page 403 =404;

  # It's always good to set logs, note however you cannot turn off the error log
  # setting error_log off; will simply create a file called 'off'.
  access_log /var/log/nginx/example.com.access.log;
  error_log /var/log/nginx/example.com.error.log;

  # Add trailing slash to */wp-admin requests.
  rewrite /wp-admin$ $scheme://$host$uri/ permanent;

  location / {
    # This try_files directive is used to enable pretty, SEO-friendly URLs
    # and permalinks for Wordpress. Leave it *off* to start with, and then
    # turn it on once you've gotten Wordpress configured!
    try_files $uri $uri/ /index.php?$args;
  }

  location /doc/ {
	alias /usr/share/doc/;
	autoindex on;
	allow 127.0.0.1;
	deny all;
  }

  # Do not log access to the favicon, to keep the logs cleaner
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  # This block will catch static file requests, such as images, css, js
  # The ?: prefix is a 'non-capturing' mark, meaning we do not require
  # the pattern to be captured into $1 which should help improve performance
  location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
	# Some basic cache-control for static files to be sent to the browser
	expires max;
	add_header Pragma public;
	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
	access_log off;
	log_not_found off;
	deny all;
  }

  location ~ ~$ {
    access_log off;
    log_not_found off;
    deny all;
  }

  # Common deny or internal locations, to help prevent access to areas of
  # the site that should not be public
  location ~* wp-admin/includes {
    deny all;
  }

  location ~* wp-includes/theme-compat/ {
    deny all;
  }

  location ~* wp-includes/js/tinymce/langs/.*\.php {
    deny all;
  }

  location /wp-content/ {
    internal;
  }

  location /wp-includes/ {
    internal;
  }

  # Prevent any potentially-executable files in the uploads directory from
  # being executed by forcing their MIME type to text/plain
  location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php)$ {
    types { }
    default_type text/plain;
  }

	#error_page 404 /404.html;

	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/www;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#

  location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	fastcgi_pass unix:/var/run/example.com.sock;
	fastcgi_index index.php;
	include fastcgi_params;
	}

  # Use this block if PHPMyAdmin is enabled for this domain
  location /phpmyadmin {
    root /usr/share/;
    index index.php index.html index.htm;

	location ~ ^/phpmyadmin/(.+\.php)$ {
      try_files $uri =404;
      root /usr/share/;
      fastcgi_pass unix:/var/example.com.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include /etc/nginx/fastcgi_params;
    }

    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
      root /usr/share/;
    }
  }

  location /phpMyAdmin {
    rewrite ^/* /phpmyadmin last;
  }

}  # End of server block.
