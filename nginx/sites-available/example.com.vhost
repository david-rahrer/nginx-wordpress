server {
  listen 80;
  server_name example.com;
  return 301 $scheme://www.example.com$request_uri;
}

server {
  listen 80; # listen for ipv4; this line is default and implied
  #listen 443 ssl;
  server_name www.example.com;

  #ssl_certificate /srv/www/example.com/ssl/www.example.com.crt;
  #ssl_certificate_key /srv/www/example.com/ssl/www.example.com.key;
  # Allow multiple connections to use the same key data
  ssl_session_cache    shared:SSL:10m;
  ssl_session_timeout  10m;

  root /srv/www/example.com/htdocs;
  index index.php index.html index.htm;
  charset UTF-8;
  autoindex off;

  # Show "Not Found" 404 errors in place of "Forbidden" 403 errors, because
  # forbidden errors allow attackers potential insight into your server's
  # layout and contents
  error_page 403 =404;

  # It's always good to set logs, note however you cannot turn off the error log
  # setting error_log off; will simply create a file called 'off'.
  access_log /var/log/nginx/example.com.access.log;
  error_log /var/log/nginx/example.com.error.log;

  # Add trailing slash to */wp-admin requests.
  rewrite /wp-admin$ $scheme://$host$uri/ permanent;

  location / {
    # This try_files directive is used to enable pretty, SEO-friendly URLs
    # and permalinks for Wordpress. Leave it *off* to start with, and then
    # turn it on once you've gotten Wordpress configured!
    try_files $uri $uri/ /index.php?$args;
  }

  # Option to create password protected directory
  # http://www.howtoforge.com/basic-http-authentication-with-nginx
  # location /admin {
  #   auth_basic "Administrator Login";
  #   auth_basic_user_file /var/www/domain.com/admin/.htpasswd;
  # }

  # Do not log access to these to keep the logs cleaner
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location = /apple-touch-icon.png {
    log_not_found off;
    access_log off;
  }

  location = /apple-touch-icon-precomposed.png {
    log_not_found off;
    access_log off;
  }

  # This block will catch static file requests, such as images, css, js
  # The ?: prefix is a 'non-capturing' mark, meaning we do not require
  # the pattern to be captured into $1 which should help improve performance
  location ~* \.(?:3gp|gif|jpg|jpe?g|png|ico|wmv|avi|asf|asx|mpg|mpeg|mp4|pls|mp3|mid|wav|swf|flv|html|htm|txt|js|css|exe|zip|tar|rar|gz|tgz|bz2|uha|7z|doc|docx|xls|xlsx|pdf|iso|woff)$ {
    # Some basic cache-control for static files to be sent to the browser
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
    access_log off;
    log_not_found off;
    deny all;
  }

  location ~ ~$ {
    access_log off;
    log_not_found off;
    deny all;
  }

  # Common deny or internal locations, to help prevent access to areas of
  # the site that should not be public
  location ~* wp-admin/includes {
    deny all;
  }

  location ~* wp-includes/theme-compat/ {
    deny all;
  }

  location ~* wp-includes/js/tinymce/langs/.*\.php {
    deny all;
  }

  location /wp-content/ {
    internal;
  }

  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }

  # Make sure these get through, esp with dynamic WP sitmap plugin
  location = /robots.txt {
    try_files $uri /index.php;
  }

  location = /sitemap.xml {
    try_files $uri /index.php;
  }

  location = /sitemap.xml.gz {
    try_files $uri /index.php;
  }

  # Fix for Firefox issue with cross site font icons
  location ~* \.(eot|otf|ttf|woff)$ {
    add_header Access-Control-Allow-Origin *;
  }

  # redirect server error pages to the static page /50x.html
  error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    root /usr/share/nginx/www;
    }

  # Cache everything by default
  set $skip_cache 0;

  # POST requests and urls with a query string should always go to PHP
  if ($request_method = POST) {
    set $skip_cache 1;
  }
  if ($query_string != "") {
    set $skip_cache 1;
  }

  # Don't cache uris containing the following segments
  if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
    set $skip_cache 1;
  }

  # Don't use the cache for logged in users or recent commenters
  if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
    set $skip_cache 1;
  }

  # Pass all .php files onto a php-fpm/php-fcgi server.
  location ~ \.php$ {
  # Zero-day exploit defence.
	# http://forum.nginx.org/read.php?2,88845,page=3
	# Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.
	# Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.
	try_files $uri =404;
	
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    fastcgi_pass unix:/var/run/example.com.sock;
    fastcgi_index index.php;
    include fastcgi_params;

    fastcgi_cache_bypass $skip_cache;
    fastcgi_no_cache $skip_cache;

    fastcgi_cache WORDPRESS;
    fastcgi_cache_valid  60m;
  }

  location ~ /purge(/.*) {
    fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
  }

  # Use this block if PHPMyAdmin is enabled for this domain
  location /phpmyadmin {
    root /usr/share/;
    index index.php index.html index.htm;

    location ~ ^/phpmyadmin/(.+\.php)$ {
      try_files $uri =404;
      root /usr/share/;
      fastcgi_pass unix:/var/run/example.com.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include /etc/nginx/fastcgi_params;
    }

    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
      root /usr/share/;
    }
  }

  location /phpMyAdmin {
    rewrite ^/* /phpmyadmin last;
  }

} # End of server block.